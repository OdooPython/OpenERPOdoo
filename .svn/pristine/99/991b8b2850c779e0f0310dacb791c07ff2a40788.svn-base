# -*- coding: utf-8 -*-

from openerp.osv import fields, osv
import urllib2
import urllib, json
import simplejson
import requests
from six.moves.urllib.request import urlopen
from random import randint

class cci_crm_infocham(osv.Model):
    _name = 'cci.crm.infocham'

    _columns = {
	'code_cci':fields.integer('Code CCI'),
	}

    def get_operateur(self, cr, uid, ids, context=None):
	code_cci=self.browse(cr,uid,ids,context=context).code_cci
	url="http://192.168.111.44/ws/adhesion/cci/"+str(code_cci)
	r = requests.get(url)
	print "type",type(r.json()) 
	r.encoding = 'utf-8'
	try:
	    foo = json.loads(r.text, 'utf-8')
	    print "Yay, I got a json !"
	    print ".....",foo

	    #récuperer les modules 
	    res_partner = self.pool.get('res.partner')
	    product_temp = self.pool.get('product.template')
	    membership_line = self.pool.get('membership_membership_line')
	    partner_category = self.pool.get('res_partner_category')
	    
	    #créer une référence aéatoire pour l'adhésion
	    ref=randint(1, 100)
	    print 'ref',ref

	    #récuperer les informations à comparer les secteurs 
	    cr.execute('SELECT name FROM res_partner_category')
	    lines_secteurs = cr.dictfetchall()
	    print 'lines_secteurs',lines_secteurs

            for partner in foo:	   	
	        #recuperer les deux listes
		adhesion_list = partner['adhesion']
		inscription_list = partner['inscription']
		print 'adhesion.....',adhesion_list,'\ninscription.....',inscription_list

		#The method get() returns a value for the given key. If key is not available then returns default value None.
		#recuperer les données des adhesions 
		type_adh =adhesion_list.get('type')
		montant_adhesion = adhesion_list.get('montant_adhesion')
		print 'type_adh.....',type_adh,'montant_adhesion.....',montant_adhesion
		#les valeurs à ajouter dans product_template dont le type=service

		vals_adh = {
			'name':type_adh,
			'list_price':montant_adhesion,
			'type':'service',
			'membership':True,
			'default_code': 'ad'+str(ref),
		}
		print 'vals_adh ....',vals_adh

	        #récuperer les informations à comparer a propos l'adhesion
	        cr.execute('SELECT name, list_price, id FROM product_template WHERE type=%s',('service',))
	        lines_product = cr.dictfetchall()

		for adhesion in lines_product:
	    		name_adhesion = adhesion['name']
	    		list_price = adhesion['list_price']
	    		id_adh = adhesion['id']

		print 'name_adhesion.....',name_adhesion,'...price',list_price,'...id',id_adh


		if type_adh in name_adhesion:
			print "existe ........."
			#update_adhesion_id=product_temp.write(cr,uid,id_adh,vals_adh,context=context)
			#print 'update_adhesion_id.......',update_adhesion_id
		else :
			print "adhesion n'existe pas ....."
			adhesion_id=product_temp.create(cr,uid,vals_adh,context=context)
			print 'adhesion_id ....',adhesion_id

		#recuperer les données des inscriptions
		nom = inscription_list.get('nom')
		prenom = inscription_list.get('prenom')
		secteur_activite = inscription_list.get('secteur_activite')
		matricule_fisc = inscription_list.get('matricule_fisc')
		adresse = inscription_list.get('adresse')
		code_postale = inscription_list.get('code_postale')
		gouvernerat = inscription_list.get('gouvernerat')
		telephone = inscription_list.get('telephone')
		raison_sociale = inscription_list.get('raison_sociale')
		email = inscription_list.get('email')
		nom_resp = inscription_list.get('nom_premier_resp')
		prenom_resp = inscription_list.get('prenom_premier_resp')
		fonction = inscription_list.get('type_operateur')
		
		print 'heyyyyyyy'

		list_email_partner={}
	        cr.execute('SELECT id, email, membership_state FROM res_partner')
	        lines_partner = cr.dictfetchall()
	        for line in lines_partner:
		    	email_partner = line['email']
			membership_state = line['membership_state']
			partner_membership_id = line['id']
			list_email_partner.append(email_partner)

		print 'list_email_partner..',list_email_partner
	    	#l'existance de l'operateur et l'adhesion

		if email in email_partner :
			print '.......existe on va le modifier'
			#vérifier s'il a une adhésion sinon ajouter son adhesion 
			if membership_state == 'paid':
				print 'c bon'
				#update_partner_id=res_partner.write(cr,uid,partner_membership_id,vals_op,context=context)
				#print 'update_partner_id.....',update_partner_id
			else : 
				vals_adh_partner_existe = {
					'state':'paid',
					'member_price':montant_adhesion,
					'membership_id':partner_membership_id,
				}
				member_line_existe_id=membership_line.create(cr,uid,vals_adh_partner_existe,context=context)
				print 'member_line_existe_id.....',member_line_existe_id
		else :
			print "......n'existe pas"
			#les valeurs à ajouter
			vals_op = {
				'name': raison_sociale,
				'website': email,
				'street': adresse,
				'zip': code_postale,
				'city': gouvernerat,
				'mobile': telephone,
				#'category_id': 5,
				'is_company': True,
			}
			print 'vals_op.....',vals_op
			partner_id=res_partner.create(cr,uid,vals_op,context=context)
			print 'partner_id.....',partner_id
			#vals_adh_partner = {
			#	'state':'paid',
			#	'member_price': montant_adhesion,
			#	'membership_id': partner_id,
			#}
			#member_line_id=membership_line.create(cr,uid,vals_adh_partner,context=context)
			#print 'member_line_id.....',member_line_id
			name=nom +""+ prenom
			print 'name .....',name
			vals_contact = {
				'name': name,
				'email': email,
				'street': adresse,
				'zip': code_postale,
				'city': gouvernerat,
				'mobile': telephone,
				#'category_id': 5,
				'is_company': False,
				'parent_id': partner_id,
			}
			print 'vals_contact.....',vals_contact	

			contact_id=res_partner.create(cr,uid,vals_contact,context=context)
			print 'contact_id.....',contact_id

			name_resp=nom_resp +""+ prenom_resp
			print 'name_resp .....',name_resp
			vals_reponsable = {
				'name': name_resp,
				'email': email,
				'street': adresse,
				'zip': code_postale,
				'city': gouvernerat,
				'mobile': telephone,
				'function':fonction,
				#'category_id': 5,
				'is_company': False,
				'parent_id': partner_id,
			}
			print 'vals_reponsable.....',vals_reponsable

			reponsable_id=res_partner.create(cr,uid,vals_reponsable,context=context)
			print 'reponsable_id.....',reponsable_id
	except Exception, e:
	    print "Why didn't i get a json ? Maybe it wasn't a json..."
	    print "What is it then? It seems is a {0} whose length is {1}".format(
		r.text.__class__, len(r.text)
	    )

	return True
