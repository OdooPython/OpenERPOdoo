# -*- coding: utf-8 -*-
from openerp.tools.translate import _
from openerp.osv import fields, osv
from openerp.exceptions import Warning

class crm_claim(osv.osv):
    _name = 'crm.claim'
    _inherit ='crm.claim'

    def _get_coach_id(self, cr, uid, ids, field_name, arg, context=None):
	print 'u will call get coach_id'
	res = {}
	for user in self.browse(cr,uid,ids,context=context):
		user_id=self.browse(cr,uid,ids,context=context).user_id.id
		print 'user_id',user_id
		section_ids = self.pool.get('crm.case.section').search(cr, uid, [('member_ids', '=', user_id)], context=context)
		if not section_ids :
			print 'nooooooooo'
			res[user.id] = 0
		else :
			print 'section_ids',section_ids
			coach_id=self.pool.get('crm.case.section').browse(cr,uid,section_ids[0],context=context).user_id.id
			print 'coach_id',coach_id
			res[user.id] = coach_id

	return res
    _columns = {
	'product_id' :fields.many2one('product.template', string="Produit", required=True),
	'coach_id': fields.function(_get_coach_id, type="integer"),
        'date_closed': fields.datetime('Closed', readonly=True),
    }
    _defaults = {
        'state': 'draft',
    }

    def create(self, cr, uid, vals, context=None):
	print "u call create crm claim..........."
	print "vals.....",vals

        crm_claim_id = super(crm_claim, self).create(cr, uid, vals, context=context)
	print 'crm_claim_id .....',crm_claim_id
	dict =vals
	user_id=dict['user_id']
	print "user_id ....",user_id

	#notif Responsable
	mail_vals = {
		'body':'<html> CCI Liste Des RÉCLAMATIONS </html>',
		'record_name':'Réclamation',
		'res_id':crm_claim_id,
		'reply_to':user_id,
		'author_id':uid,
		'model':'crm.claim',
		'type':'notification',
		'email_from':uid,
		'starred':True,
	}
	print 'mail_vals ========',repr(mail_vals)
	message = self.pool.get('mail.message').create(cr, uid, mail_vals, context=context) 
	print 'message  ========',message 

	print "messages reçu"
	partner_id=self.pool.get('res.users').browse(cr, uid, user_id, context=context).partner_id.id
	print "partner_id",partner_id
	mail_notif_vals = {
		'partner_id':partner_id,
		'message_id':message,
		'is_read':False,
		'starred':True,

	}
	print 'vals .......',mail_notif_vals
	id_rec=self.pool.get('mail.notification').create(cr, uid, mail_notif_vals)
	print "Notification reçu vers manager...............................",id_rec
	return crm_claim_id



